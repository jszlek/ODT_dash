from configparser import ConfigParser
import h2o
import random
import string
import psutil
import webbrowser
from pathlib import Path


class RunBeforeDash:
    def __init__(self):
        # Load config.ini file
        config = ConfigParser(allow_no_value=True)
        config.read('config.ini')

        my_threads = int(config['DEFAULT']['my_threads'])
        my_max_ram_allowed = int(config['DEFAULT']['my_max_ram_allowed'])

        # If you are assigning callbacks to components that are
        # generated by other callbacks (and therefore not in the
        # initial layout), you can suppress this exception by setting
        # `suppress_callback_exceptions=True`.
        suppress_callback_exceptions = True

        # -------------------------------
        # Random key generator - function
        # -------------------------------
        def random_key_generator(size=6, chars=string.ascii_letters + string.digits):
            return ''.join(random.choice(chars) for _ in range(size))

        # get current directory (PosixPath)
        # -----------------------
        my_current_dir = Path.cwd()

        # check runtime mode - either many servers on the machine (server_multicore = F)
        # or one server per one machine (server_multicore = T)
        # -------------------------------------------
        my_cores = my_threads

        # check system free mem and apply it to the server
        # ------------------------------------------------
        memfree = psutil.virtual_memory().total
        memfree_g = int(round(memfree / 1024 / 1024 / 1024 / my_cores))

        if memfree_g < 2:
            memfree_g = 2

        # Create three random strings
        # -------------------------
        aml_name = 'A' + random_key_generator(15)  # for FS project name
        aml2_name = 'A' + random_key_generator(15)  # for classic approach project name
        cluster_name = 'A' + random_key_generator(15)  # for h2o cluster name

        # -------------------------------------
        # run h2o server
        # -------------------------------------
        h2o.init(
                 nthreads=my_threads,
                 min_mem_size=memfree_g,
                 max_mem_size=memfree_g,
                 port=57750,
                 ip='127.0.0.1',
                 #         ice_root=str(my_export_dir),
                 name=str(cluster_name),
                 start_h2o=True,
                 strict_version_check=False)
        # -------------------------------------

# --------------------------------------
# Load h2o model
# --------------------------------------
run_before_dash = RunBeforeDash()
my_model = h2o.load_model('model/DeepLearning_grid__2_AutoML_20210831_185216_model_20')


def open_browser(port=8050):
    webbrowser.open_new(f"http://localhost:{port}")